@page "/Admin/Articles/New"
@using Microsoft.AspNetCore.Identity
@using Markdig
@using FizzyLogic.Markdown
@inject Slugifier Slugifier
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject IImageService ImageService;
@code {
    private MarkdownEditor _editorInstance;

    private Article Article { get; set; }

    private string PreviewLink { get; set; }
    
    private string SelectedCategoryId { get; set; } = "-1";
    
    private string Title { get; set; } = "";
    
    private string Body { get; set; } = "";
    
    private string Excerpt { get; set; } = "";
    
    private IBrowserFile FeaturedImageFile { get; set; }
    
    private IEnumerable<Category> AvailableCategories { get; set; }
    
    private bool IsLoading { get; set; } = true;
    
    private bool IsTitleValid { get; set; } = true;
    
    private bool IsCategoryValid { get; set; } = true;
    
    private bool IsBodyValid { get; set; } = true;
    
    private bool IsSettingsVisible { get; set; }
    
    private bool CanPublish { get; set; } = true;
    
    private bool ShowValidationError => !(IsBodyValid && IsCategoryValid && IsTitleValid);

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var applicationDbContext = DbContextFactory.CreateDbContext();

        AvailableCategories = await applicationDbContext.Categories
            .OrderBy(x => x.Title)
            .ToListAsync();

        IsLoading = false;
    }

    private async Task<bool> IsContentValidAsync()
    {
        Body = await _editorInstance.GetEditorContentAsync();

        IsBodyValid = !string.IsNullOrEmpty(Body);
        IsTitleValid = !string.IsNullOrEmpty(Title);
        IsCategoryValid = SelectedCategoryId != "-1";

        return IsTitleValid && IsCategoryValid && IsBodyValid;
    }

    private async Task SaveChangesAsync(bool publish)
    {
        var markdownPipeline = new MarkdownPipelineBuilder()
            .UseAdvancedExtensions()
            .UseFizzyLogicExtensions()
            .Build();
        
        void UpdateArticleProperties(ApplicationUser author, Category category, string featuredImageUrl)
        {
            Article.Title = Title;
            Article.Author = author;
            Article.Category = category;
            Article.Markdown = Body;
            Article.Html = Markdown.ToHtml(Body, markdownPipeline);
            Article.FeaturedImage = featuredImageUrl;
            Article.Excerpt = Excerpt;
            Article.DateCreated = DateTime.UtcNow;
            Article.Slug = Slugifier.Process(Title);

            // You can only publish once, and we don't want to break the URL.
            // So instead of blindly overwriting the publication date, set it only once.
            if (publish && Article.DatePublished == null)
            {
                Article.DatePublished = DateTime.UtcNow;
                CanPublish = false;
            }
        }

        var valid = await IsContentValidAsync();

        if (valid)
        {
            var applicationDbContext = DbContextFactory.CreateDbContext();
            var authenticationState = await AuthenticationState;
            var author = await UserManager.GetUserAsync(authenticationState.User);
            var categoryId = Int32.Parse(SelectedCategoryId);
            var category = await applicationDbContext.Categories.SingleAsync(x => x.Id == categoryId);
            var featuredImageUrl = "";

            if (FeaturedImageFile != null)
            {
                featuredImageUrl = await UploadFeaturedImage(FeaturedImageFile);
            }

            if (string.IsNullOrEmpty(Excerpt))
            {
                var plainTextContent = Markdown.ToPlainText(Body, markdownPipeline);
                Excerpt = plainTextContent.Substring(0, Math.Min(plainTextContent.Length, 250));
            }

            applicationDbContext.Attach(author);

            if (Article == null)
            {
                Article = new Article();

                UpdateArticleProperties(author, category, featuredImageUrl);

                await applicationDbContext.Articles.AddAsync(Article);
                await applicationDbContext.SaveChangesAsync();
            }
            else
            {
                Article = await applicationDbContext.Articles.SingleAsync(x => x.Id == Article.Id);

                UpdateArticleProperties(author, category, featuredImageUrl);

                await applicationDbContext.SaveChangesAsync();
            }
        }
    }

    private async Task OnSaveClick()
    {
        await SaveChangesAsync(false);
    }

    private async Task OnPublishClick()
    {
        await SaveChangesAsync(true);
    }

    private async Task<string> UploadFeaturedImage(IBrowserFile featuredImageFile)
    {
        return await ImageService.UploadImage(
            featuredImageFile.Name, 
            featuredImageFile.OpenReadStream(maxAllowedSize: 2048000));
    }

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        FeaturedImageFile = e.File;
    }

    private void OnToggleSettings()
    {
        IsSettingsVisible = !IsSettingsVisible;
    }

    private async Task OnPreviewClick()
    {
        await SaveChangesAsync(false);
        PreviewLink = $"/Preview/{Article.Id}";
    }
}

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <NavLink href="/Admin/">Admin panel</NavLink>
        </li>
        <li class="breadcrumb-item active" aria-current="page">Create new article</li>
    </ol>
</nav>
@if (IsLoading)
{
    <div class="row justify-content-center">
        <div class="spinner-grow"></div>
    </div>
}
else
{
    @if (ShowValidationError)
    {
        <div class="row">
            <div class="col">
                <div class="alert alert-danger">
                    Unable to save or publish. Please make sure to fill out the required fields. 
                    They may be hidden in the settings panel.
                </div>
            </div>
        </div>
    }
    
    @if (!string.IsNullOrEmpty(PreviewLink))
    {
        <div class="row">
            <div class="col">
                <div class="alert alert-info">
                    Preview is ready. <a target="_blank" href="@PreviewLink">Check it out!</a>
                </div>
            </div>
        </div>
    }
    
    <div class="row mb-4 justify-content-end">
        <div class="col-auto">
            <div class="float-start dropdown ms-1">
                <button id="toggleSettingsPanel" class="btn btn-outline-secondary mr-1" data-toggle="dropdown" @onclick="OnToggleSettings">
                    <i class="fal fa-cog"></i>
                </button>
                <div class="dropdown-menu dropdown-menu-right shadow @(IsSettingsVisible ? "show" : "")" style="width: 450px; margin-left: -408px">
                    <div class="py-2 px-2">
                        <div class="row mb-2">
                            <div class="col">
                                <label for="category">Category</label>
                                <select class="form-select @(IsCategoryValid ? "" : "is-invalid")" @bind="SelectedCategoryId" id="category">
                                    <option value="-1">Select a category</option>
                                    @foreach (var category in AvailableCategories)
                                    {
                                        <option value="@category.Id">@category.Title</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="row mb-2">
                            <div class="col">
                                <label for="excerpt">Excerpt:</label>
                                <textarea id="excerpt" @bind="Excerpt" rows="4" class="form-control"></textarea>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <label for="featuredImage">Featured image:</label>
                                <InputFile type="file" id="featuredImage" class="form-control" OnChange="OnFileSelected"></InputFile>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
            <button id="previewArticle" class="float-start btn btn-outline-secondary ms-1" @onclick="OnPreviewClick">Preview</button>
            <button id="saveArticle" class="float-start btn @(CanPublish ? "btn-outline-secondary" : "btn-outline-primary") ms-1" @onclick="OnSaveClick">Save</button>
            @if (CanPublish)
            {
                <button id="publishArticle" class="float-start btn btn-outline-primary ms-1" @onclick="OnPublishClick">Publish</button>
            }
        </div>
    </div>
    <div class="row mb-2">
        <div class="col">
            <input type="text" id="title" class="form-control form-control-lg @(IsTitleValid ? "" : "is-invalid")" placeholder="Enter the title of your article" @bind="Title"/>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col">
            <MarkdownEditor Content="" @ref="_editorInstance" IsInvalid="!IsBodyValid"></MarkdownEditor>
        </div>
    </div>
}