@using FizzyLogic.Data
@using FizzyLogic.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@code {
    public IEnumerable<Article> Articles { get; set; }
    public bool IsLoading { get; set; } = true;
    
    protected override async Task OnInitializedAsync()
    {
        var applicationDbContext = DbContextFactory.CreateDbContext();
        
        Articles = await applicationDbContext.Articles
            .Include(x => x.Category)
            .OrderByDescending(x => x.DateCreated)
            .ToListAsync();
        
        IsLoading = false;
    }
}
@if (IsLoading)
{
    <div class="row justify-content-center">
        <div class="col-auto">
            <div class="spinner-grow" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    </div>
}
else {
    <table class="table hover">
        <thead>
        <tr>
            <th>Title</th>
            <th>Category</th>
            <th>Status</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var article in Articles)
        {
            <tr>
                <td>@article.Title</td>
                <td>@article.Category.Title</td>
                <td>
                    @if (article.DatePublished == null)
                    {
                        <span class="badge bg-warning">draft</span>
                    }
                    else
                    {
                        <span class="badge bg-info">published</span>
                    }
                </td>
                <td>
                    <a href="/Admin/EditPost" class="btn btn-sm btn-outline-info">edit</a>
                    <a href="/Admin/Articles/Delete" class="btn btn-sm btn-outline-danger remove-post">delete</a>
                </td>
            </tr>
        }
        </tbody>
    </table>
}